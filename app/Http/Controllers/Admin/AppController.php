<?php
/**
 * Created by PhpStorm.
 * User: wangzaron
 * Date: 2018/6/28
 * Time: 上午10:33
 */

namespace App\Http\Controllers\Admin;


use App\Entities\Shop;
use App\Http\Controllers\FileManager\UploadController as Controller;
use App\Http\Requests\Admin\AppCreateRequest;
use App\Http\Requests\Admin\AppUpdateRequest;
use App\Http\Response\JsonResponse;
use App\Repositories\AppRepository;
use App\Repositories\FileRepository;
use App\Http\Requests\Admin\AppLogoImageRequest;
use App\Transformers\AppItemTransformer;
use App\Transformers\AppTransformer;
use Dingo\Api\Http\Request;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Carbon;

class AppController extends Controller
{
    use ControllerTrait;
    //定义repository 处理model层数据
    protected $appRepository  = null;

    public function __construct(FileRepository $fileModel, AppRepository $appRepository, Request $request)
    {
        parent::__construct($fileModel);
        $this->appRepository = $appRepository;
        $this->parseApp($request, $appRepository);
    }

    public function uploadLogo(AppLogoImageRequest $request, string $driver = "default")
    {
        return parent::upload($request, $driver); // TODO: Change the autogenerated stub
    }

    public function store(AppCreateRequest $request)
    {
        $item = $this->appRepository->create($request->all());
        return $this->response()->item($item, new AppTransformer());
    }

    public function index(Request $request)
    {
        $items = $this->appRepository->paginate($request->input('limit', PAGE_LIMIT));
        return $this->response()->paginator($items, new AppItemTransformer());
    }

    public function update(string $id, AppUpdateRequest $request)
    {
        $result = $this->appRepository->update($request->all(), $id);
        return $this->response()->item($result, new AppTransformer());
    }

    public function show(string $id)
    {
        $time = Carbon::today(config('app.timezone'))
            ->startOfDay()
            ->subDay(7);

        $item = $this->appRepository
            ->with(['users' => function (HasMany $users) use($time){
                return $users->where('last_login_at', '>=', $time);
            }])
            ->withCount([
                'shops' => function (HasMany $shops) {
                    return $shops->where('status', '<>', Shop::STATUS_WAIT);
                },
                'orders' => function (HasMany $orders) use($time){
                    return $orders->where('paid_at', '>=', $time);
                }])->find($id);

        return $this->response()->item($item, new AppTransformer());
    }

    public function destroy(string $id)
    {
        $result = $this->appRepository->delete($id);
        return $this->response(new JsonResponse(['delete_count' => $result]));
    }

}