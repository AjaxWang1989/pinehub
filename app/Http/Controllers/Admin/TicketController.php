<?php

namespace App\Http\Controllers\Admin;

use App\Criteria\Admin\SearchRequestCriteria;
use App\Criteria\Admin\TicketCriteria;
use App\Entities\CustomerTicketCard;
use App\Entities\Ticket;
use App\Entities\TicketTemplateMessage;
use App\Events\SyncTicketCardInfoEvent;
use App\Http\Controllers\Admin\CardsController as Controller;
use App\Http\Requests\Admin\TicketCreateRequest;
use App\Http\Requests\Admin\TicketUpdateRequest;
use App\Http\Response\UpdateResponse;
use App\Repositories\AppRepository;
use App\Repositories\TicketRepository;
use App\Repositories\TicketTemplateMessageRepository;
use App\Services\AppManager;
use App\Transformers\TicketItemTransformer;
use App\Transformers\TicketTemplateMessageTransformer;
use App\Transformers\TicketTransformer;
use App\Transformers\UserTemplateMessageTransformer;
use Dingo\Api\Http\Request;
use EasyWeChat\Kernel\Http\StreamResponse;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Carbon;
use Illuminate\Support\Facades\Event;
use InvalidArgumentException;

class TicketController extends Controller
{
    //
    use ControllerTrait;

    protected $ticketRepository = null;

    public function __construct(Request $request, TicketRepository $ticketRepository, AppRepository $appRepository)
    {
        $this->ticketRepository = $ticketRepository;
        $this->parseApp($request, $appRepository);
        parent::__construct($ticketRepository);
    }


    /**
     *创建现金/折扣券
     * @param TicketCreateRequest $request
     * @return \Dingo\Api\Http\Response
     * @throws \Exception
     */
    public function store(TicketCreateRequest $request)
    {
        $ticket = $request->input('ticket_info');
        if ($request->input('ticket_type', Ticket::CASH) === Ticket::DISCOUNT) {
            $ticket['least_cost'] = null;
        }
        if (isset($ticket['least_cost']) && $ticket['least_cost'] !== null) {
            $ticket['least_cost'] = (float)$ticket['least_cost'];
        }

        if (isset($ticket['reduce_cost']) && $ticket['reduce_cost'] !== null) {
            $ticket['reduce_cost'] = (float)$ticket['reduce_cost'];
        }

        if (isset($ticket['discount']) && $ticket['discount'] !== null) {
            $ticket['discount'] = (float)$ticket['discount'];
        }

        $request->merge([
            'card_info' => $ticket,
            'platform' => $request->input('platform', OWNER_TICKET),
            'card_type' => $request->input('ticket_type', Ticket::CASH),
            'begin_at' => Carbon::createFromTimeString($request->input('begin_at', Carbon::now()->format('Y-m-d H:i:s'))),
            'end_at' => $request->input('end_at', null) ? Carbon::createFromTimeString($request->input('end_at')) : null
        ]);
        $ticket = parent::storeCard($request);

        $ticketTemplateMessages = app(TicketTemplateMessageRepository::class)->scopeQuery(function (TicketTemplateMessage $ticketTemplateMessage) {
            return $ticketTemplateMessage->whereIsDefault(true)->whereIn('type', [TEMPLATE_TICKET_RECEIVE, TEMPLATE_TICKET_OVER_DATE]);
        })->all();

        $attachOptions = [];
        foreach ($ticketTemplateMessages as $templateMessage) {
            $attachOptions[$templateMessage->userTemplateId] = ['scene' => $templateMessage->scene, 'type' => $templateMessage->type];
        }
        $ticket->normalTemplateMessages()->attach($attachOptions);

        if ($request->input('sync', false)) {
            $ticket->exists = true;
            Event::fire(new SyncTicketCardInfoEvent($ticket, null, app('wechat')->officeAccount()));
        }
        return $this->response()->item($ticket, new TicketItemTransformer());
    }

    /**
     * 获取优惠券列表
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        $this->ticketRepository->pushCriteria(app(TicketCriteria::class));
        $this->ticketRepository->pushCriteria(app(SearchRequestCriteria::class));
        $this->ticketRepository->withCount([
            'customerTickets as used_count' => function (Builder $query) {
                return $query->whereNotNull('customer_id')->where('status', CustomerTicketCard::STATUS_USE);
            }
        ]);
        $tickets = parent::index(); // TODO: Change the autogenerated stub

        return $this->response()->paginator($tickets, new TicketItemTransformer());
    }

    /**
     *
     * @param TicketUpdateRequest $request
     * @param $id
     * @return \Dingo\Api\Http\Response
     * @throws \Exception
     */
    public function update(TicketUpdateRequest $request, $id)
    {
        $ticket = parent::updateCard($request, $id); // TODO: Change the autogenerated stub
        if ($request->input('sync', false)) {
            $ticket->exists = true;
            Event::fire(new SyncTicketCardInfoEvent($ticket, $ticket->cardInfo, app('wechat')->officeAccount()));
        }

        return $this->response()->item($ticket, new TicketTransformer());
    }

    /**
     * @param int $id
     * @return Response
     * @throws
     * */
    public function unavailable(int $id)
    {
        $result = $this->repository
            ->update(['status' => Ticket::UNAVAILABLE], $id);

        if ($result) {
            $result = app('wechat')
                ->officeAccount()->card
                ->reduceStock($result->cardId, $result->cardInfo['base_info']['sku']['quantity']);

            if ($result['errcode'] !== 0) {
                $this->response()->error('同步失败', HTTP_STATUS_NOT_MODIFIED);
            } else {
                return $this->response(new JsonResponse(['message' => '设置成功，卡券已经失效']));
            }
        } else {
            $this->response()->error('设置失败', HTTP_STATUS_NOT_MODIFIED);
        }
    }


    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return \Dingo\Api\Http\Response
     */
    public function show($id)
    {
        /** @var Ticket $id */
        $ticket = parent::show($id);
        return $this->response()->item($ticket, new TicketTransformer());
    }

    /**
     * 普通链接二维码
     * Ticket normal promote qrCode.
     *
     * @param Request $request
     * @param int $ticketId
     * @return \Dingo\Api\Http\Response
     */
    public function promoteQRCode(Request $request, int $ticketId)
    {
        $url = buildUrl('web.wxMp', '/ticket/receive/{ticketId}', ['ticketId' => $ticketId]);
        $code = app('qrcode')->format('png')->margin(2)->size($request->input('size', 128))->generate($url);
        return $this->response()->created()->setContent($code)->header('Content-Type', 'image/png');
    }

    /**
     * 小程序码
     * @param Request $request
     * @param int $ticketId
     * @return StreamResponse
     */
    public function promoteMiniCode(Request $request, int $ticketId)
    {
        /** @var Ticket $ticket */
        $ticket = $this->ticketRepository->find($ticketId);

        $response = $this->ticketRepository->getPromoteMiniCode($ticket);

        return $response;
    }

    public function bindTemplateMessage(Request $request, int $ticketId, int $templateId)
    {
        /** @var Ticket $ticket */
        $ticket = $this->ticketRepository->find($ticketId);

        if (!($scene = $request->input('scene'))) {
            throw new InvalidArgumentException('缺少模板消息应用场景scene');
        }

        if (!in_array($scene, Ticket::TEMPLATE_SCENES)) {
            throw new InvalidArgumentException('应用场景scene错误');
        }

        if (!($type = $request->input('type'))) {
            throw new InvalidArgumentException('缺少模板消息类型type参数');
        }

        $wxType = $request->input('wx_type', 'miniprogram');
        $appManager = app(AppManager::class);
        $wxAppId = null;
        switch ($wxType) {
            case TEMPLATE_PLATFORM_MINIPROGRAM:
                $wxAppId = $appManager->miniProgram()->appId;
                break;
            case TEMPLATE_PLATFORM_OFFICIAL_ACCOUNT:
                $wxAppId = $appManager->officialAccount()->appId;
                break;
        }
        if (!$wxAppId) {
            throw new ModelNotFoundException("未找到微信类型'{$wxType}'的实体");
        }
        $ticket->templateMessages($wxAppId, $scene)->detach();
        $ticket->templateMessages($wxAppId, $scene)->attach($templateId, ['scene' => $scene, 'type' => $type]);
        $templateMessage = $ticket->templateMessage($wxAppId, $scene);

        return $this->response()->item($templateMessage, new UserTemplateMessageTransformer());
    }

    public function unBindTemplateMessage(int $ticketId, int $templateId)
    {
        /** @var Ticket $ticket */
        $ticket = $this->ticketRepository->find($ticketId);

        $result = $ticket->normalTemplateMessages()->detach($templateId);

        if (!$result) {
            throw new ModelNotFoundException('解绑失败');
        }

        return $this->response(new UpdateResponse('解绑成功'));
    }

    public function unBindDefaultTemplateMessage(Request $request, int $templateId)
    {
        if (!($scene = $request->input('scene'))) {
            throw new InvalidArgumentException('缺少模板消息应用场景scene');
        }

        if (!in_array($scene, Ticket::TEMPLATE_SCENES)) {
            throw new InvalidArgumentException('应用场景scene错误');
        }

        if (!($type = $request->input('type'))) {
            throw new InvalidArgumentException('缺少模板消息类型type参数');
        }

        $ticketTemplate = app(TicketTemplateMessageRepository::class)->scopeQuery(function (TicketTemplateMessage $ticketTemplateMessage) use ($scene, $type, $templateId) {
            return $ticketTemplateMessage->whereIsDefault(true)->whereUserTemplateId($templateId)->whereType($type);
        })->firstOrNew();

        if (!app(TicketTemplateMessageRepository::class)->delete($ticketTemplate->id)) {
            throw new ModelNotFoundException('解绑失败');
        }

        return $this->response(new UpdateResponse('解绑成功'));
    }

    public function templateMessages($ticketId)
    {
        $ticketTemplateMessages = app(TicketTemplateMessageRepository::class)->scopeQuery(function (TicketTemplateMessage $ticketTemplateMessage) use ($ticketId) {
            return $ticketTemplateMessage->whereTicketId($ticketId);
        })->all();

        return $this->response()->collection($ticketTemplateMessages, new TicketTemplateMessageTransformer());
    }

    public function templateMessage(Request $request, int $ticketId, string $wxType, string $scene)
    {
        /** @var Ticket $ticket */
        $ticket = $this->ticketRepository->find($ticketId);

        if (!in_array($scene, Ticket::TEMPLATE_SCENES)) {
            throw new InvalidArgumentException('应用场景scene错误');
        }

        $appManager = app(AppManager::class);
        $wxAppId = null;
        switch ($wxType) {
            case TEMPLATE_PLATFORM_MINIPROGRAM:
                $wxAppId = $appManager->miniProgram()->appId;
                break;
            case TEMPLATE_PLATFORM_OFFICIAL_ACCOUNT:
                $wxAppId = $appManager->officialAccount()->appId;
                break;
        }
        if (!$wxAppId) {
            throw new ModelNotFoundException("未找到微信类型'{$wxType}'的实体");
        }

        $templateMessage = $ticket->templateMessage($wxAppId, $scene);

        return $this->response()->item($templateMessage, new UserTemplateMessageTransformer());
    }

    public function defaultTemplateMessages(Request $request, TicketTemplateMessageRepository $ticketTemplateMessageRepository)
    {
        if (!($types = json_decode($request->input('types', null))) || !count($types)) {
            throw new InvalidArgumentException('模板消息类型types不明确');
        }

        $templateMessages = $ticketTemplateMessageRepository->scopeQuery(function (TicketTemplateMessage $ticketTemplateMessage) use ($types) {
            return $ticketTemplateMessage->whereIsDefault(true)->whereIn('type', $types);
        })->all();

        return $this->response()->collection($templateMessages, new TicketTemplateMessageTransformer());
    }

    public function bindDefaultTemplateMessage(Request $request, TicketTemplateMessageRepository $ticketTemplateMessageRepository, int $templateId)
    {
        if (!($scene = $request->input('scene'))) {
            throw new InvalidArgumentException('缺少模板消息应用场景scene');
        }

        if (!in_array($scene, Ticket::TEMPLATE_SCENES)) {
            throw new InvalidArgumentException('应用场景scene错误');
        }

        if (!($type = $request->input('type'))) {
            throw new InvalidArgumentException('缺少模板消息类型type参数');
        }

        $wxType = $request->input('wx_type', 'miniprogram');
        $appManager = app(AppManager::class);
        $wxAppId = null;
        switch ($wxType) {
            case TEMPLATE_PLATFORM_MINIPROGRAM:
                $wxAppId = $appManager->miniProgram()->appId;
                break;
            case TEMPLATE_PLATFORM_OFFICIAL_ACCOUNT:
                $wxAppId = $appManager->officialAccount()->appId;
                break;
        }
        if (!$wxAppId) {
            throw new ModelNotFoundException("未找到微信类型'{$wxType}'的实体");
        }

        /** @var TicketTemplateMessage $ticketTemplateMessage */
        $ticketTemplateMessage = $ticketTemplateMessageRepository->firstOrNew([
            'scene' => $scene,
            'is_default' => true,
            'type' => $type
        ]);
        $ticketTemplateMessage->userTemplateId = $templateId;
        $ticketTemplateMessage->save();

        $templateMessage = $ticketTemplateMessage->userTemplateMessage;

        return $this->response()->item($templateMessage, new UserTemplateMessageTransformer());
    }
}
