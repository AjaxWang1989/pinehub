<?php

namespace App\Http\Controllers\Admin;

use App\Criteria\Admin\MerchandiseCriteria;
use App\Criteria\Admin\SearchRequestCriteria;
use App\Entities\Merchandise;
use App\Http\Requests\Admin\MerchandiseImageRequest;
use App\Http\Response\JsonResponse;

use App\Repositories\FileRepository;
use App\Services\AppManager;
use Dingo\Api\Http\Request;
use Exception;
use App\Http\Requests\Admin\MerchandiseCreateRequest;
use App\Http\Requests\Admin\MerchandiseUpdateRequest;
use App\Transformers\MerchandiseTransformer;
use App\Transformers\MerchandiseItemTransformer;
use App\Repositories\MerchandiseRepository;
use App\Http\Controllers\FileManager\UploadController as Controller;
/**
 * Class MerchandisesController.
 *
 * @package namespace App\Http\Controllers\Admin;
 */
class MerchandisesController extends Controller
{
    /**
     * @var MerchandiseRepository
     */
    protected $repository;


    /**
     * MerchandisesController constructor.
     *
     * @param MerchandiseRepository $repository
     * @param FileRepository $fileRepository
     */
    public function __construct(MerchandiseRepository $repository, FileRepository $fileRepository)
    {
        $this->repository = $repository;
        parent::__construct($fileRepository);
    }

    /**
     * Display a listing of the resource.
     *
     * @param Request $request
     * @return \Illuminate\Http\Response
     * @throws \ErrorException
     */
    public function index(Request $request)
    {
        $this->repository->pushCriteria(MerchandiseCriteria::class);
        $this->repository->pushCriteria(app(SearchRequestCriteria::class));
        $merchandises = $this->repository->scopeQuery(function ($merchandise) {
            return $merchandise->where('app_id', app(AppManager::class)->getAppId());
        })->paginate($request->input('limit', PAGE_LIMIT));
        return $this->response()->paginator($merchandises, new MerchandiseItemTransformer());
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  MerchandiseCreateRequest $request
     *
     * @return \Illuminate\Http\Response
     *
     * @throws Exception
     */
    public function store(MerchandiseCreateRequest $request)
    {
        $categories = $request->input('categories');
        $data = $request->except(['categories']);
        $merchandise = $this->repository->create($data);
        tap($merchandise, function (Merchandise $merchandise) use($categories){
            $merchandise->categories()->sync($categories);
        });
        return $this->response()->item($merchandise, new MerchandiseTransformer());
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $merchandise = $this->repository->find($id);

        return $this->response()->item($merchandise, new MerchandiseTransformer());
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        $merchandise = $this->repository->find($id);

        return view('merchandises.edit', compact('merchandise'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  MerchandiseUpdateRequest $request
     * @param  string            $id
     *
     * @return \Illuminate\Http\Response
     *
     * @throws Exception
     */
    public function update(MerchandiseUpdateRequest $request, $id)
    {
        $categories = $request->input('categories');
        $data = $request->except(['categories']);
        $merchandise = $this->repository->update($data, $id);
        tap($merchandise, function (Merchandise $merchandise) use($categories){
            $merchandise->categories()->sync($categories);
        });
        return $this->response()->item($merchandise, new MerchandiseTransformer());
    }


    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     *
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        $deleted = $this->repository->delete($id);
        return $this->response(new JsonResponse(['delete_count' => $deleted]));
    }

    public function uploadMerchandiseImage(MerchandiseImageRequest $request, string $driver="default")
    {
        $appManager = app(AppManager::class);
        $appId = $appManager->currentApp->id;
        $request->request->set('dir', "{$appId}/merchandise");
        return $this->upload($request, $driver);
    }

    public function __destruct()
    {
        $this->repository = null;
        parent::__destruct(); // TODO: Change the autogenerated stub
    }
}
